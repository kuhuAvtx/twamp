// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: twamp_messages.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwampMetricsServiceClient is the client API for TwampMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwampMetricsServiceClient interface {
	// Main service for Traffic latency metrics service
	GetMetrics(ctx context.Context, in *TwampMetricsRequest, opts ...grpc.CallOption) (TwampMetricsService_GetMetricsClient, error)
}

type twampMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwampMetricsServiceClient(cc grpc.ClientConnInterface) TwampMetricsServiceClient {
	return &twampMetricsServiceClient{cc}
}

func (c *twampMetricsServiceClient) GetMetrics(ctx context.Context, in *TwampMetricsRequest, opts ...grpc.CallOption) (TwampMetricsService_GetMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TwampMetricsService_ServiceDesc.Streams[0], "/twamp.TwampMetricsService/GetMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &twampMetricsServiceGetMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwampMetricsService_GetMetricsClient interface {
	Recv() (*TwampMetricsReply, error)
	grpc.ClientStream
}

type twampMetricsServiceGetMetricsClient struct {
	grpc.ClientStream
}

func (x *twampMetricsServiceGetMetricsClient) Recv() (*TwampMetricsReply, error) {
	m := new(TwampMetricsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwampMetricsServiceServer is the server API for TwampMetricsService service.
// All implementations should embed UnimplementedTwampMetricsServiceServer
// for forward compatibility
type TwampMetricsServiceServer interface {
	// Main service for Traffic latency metrics service
	GetMetrics(*TwampMetricsRequest, TwampMetricsService_GetMetricsServer) error
}

// UnimplementedTwampMetricsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTwampMetricsServiceServer struct {
}

func (UnimplementedTwampMetricsServiceServer) GetMetrics(*TwampMetricsRequest, TwampMetricsService_GetMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}

// UnsafeTwampMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwampMetricsServiceServer will
// result in compilation errors.
type UnsafeTwampMetricsServiceServer interface {
	mustEmbedUnimplementedTwampMetricsServiceServer()
}

func RegisterTwampMetricsServiceServer(s grpc.ServiceRegistrar, srv TwampMetricsServiceServer) {
	s.RegisterService(&TwampMetricsService_ServiceDesc, srv)
}

func _TwampMetricsService_GetMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TwampMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwampMetricsServiceServer).GetMetrics(m, &twampMetricsServiceGetMetricsServer{stream})
}

type TwampMetricsService_GetMetricsServer interface {
	Send(*TwampMetricsReply) error
	grpc.ServerStream
}

type twampMetricsServiceGetMetricsServer struct {
	grpc.ServerStream
}

func (x *twampMetricsServiceGetMetricsServer) Send(m *TwampMetricsReply) error {
	return x.ServerStream.SendMsg(m)
}

// TwampMetricsService_ServiceDesc is the grpc.ServiceDesc for TwampMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwampMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twamp.TwampMetricsService",
	HandlerType: (*TwampMetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetrics",
			Handler:       _TwampMetricsService_GetMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "twamp_messages.proto",
}
